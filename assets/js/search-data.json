{
  
    
        "post0": {
            "title": "Title",
            "content": "import qiskit qiskit.__qiskit_version__ . {&#39;qiskit-terra&#39;: &#39;0.19.1&#39;, &#39;qiskit-aer&#39;: &#39;0.10.2&#39;, &#39;qiskit-ignis&#39;: &#39;0.7.0&#39;, &#39;qiskit-ibmq-provider&#39;: &#39;0.18.3&#39;, &#39;qiskit-aqua&#39;: None, &#39;qiskit&#39;: &#39;0.34.1&#39;, &#39;qiskit-nature&#39;: None, &#39;qiskit-finance&#39;: None, &#39;qiskit-optimization&#39;: None, &#39;qiskit-machine-learning&#39;: None} . from qiskit import QuantumCircuit qc = QuantumCircuit(3,3) qc.draw() . from qiskit import QuantumCircuit qc = QuantumCircuit(3,3) qc.measure([0,1,2],[0,1,2]) qc.draw() . from qiskit.providers.aer import AerSimulator sim = AerSimulator() . job = sim.run(qc) result = job.result() result.get_counts() . {&#39;000&#39;: 1024} . qc = QuantumCircuit(3,3) qc.x([0,1]) qc.measure([0,1,2],[0,1,2]) qc.draw() . job = sim.run(qc) results = job.result() results.get_counts() . {&#39;011&#39;: 1024} . qc = QuantumCircuit(2,2) qc.x(0) qc.cx(0,1) qc.measure([0,1],[0,1]) display(qc.draw()) job = sim.run(qc) result = job.result() print(&quot;Result: &quot;, result.get_counts()) . Result: {&#39;11&#39;: 1024} . test_qc = QuantumCircuit(4,2) test_qc.x(0) test_qc.x(1) test_qc.cx(0,2) test_qc.cx(1,2) test_qc.ccx(0,1,3) test_qc.measure(2,0) test_qc.measure(3,1) test_qc.draw() . job = sim.run(test_qc) result = job.result() result.get_counts() . {&#39;10&#39;: 1024} . job = sim.run(test_qc) result = job.result() result.get_counts() . {&#39;10&#39;: 1024} . .",
            "url": "https://sandeshkatakam.github.io/My-Machine_learning-Blog/2022/01/01/Qiskit-Introductory-QC-Module.html",
            "relUrl": "/2022/01/01/Qiskit-Introductory-QC-Module.html",
            "date": " • Jan 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "AXIS BANK STOCK MARKET DATA ANALYSIS",
            "content": "Downloading the Dataset . In this section of the Jupyter notebook we are going to download an interesting data set from kaggle dataset repositories. We are using python library called OpenDatasets for downloading from kaggle. While downloading we are asked for kaggle user id and API token key for accessing the dataset from kaggle. Kaggle is a platform used for obtaining datasets and various other datascience tasks. . !pip install jovian opendatasets --upgrade --quiet . Let&#39;s begin by downloading the data, and listing the files within the dataset. . dataset_url = &#39;https://www.kaggle.com/rohanrao/nifty50-stock-market-data&#39; . import opendatasets as od od.download(dataset_url) . Skipping, found downloaded files in &#34;./nifty50-stock-market-data&#34; (use force=True to force download) . The dataset has been downloaded and extracted. . data_dir = &#39;./nifty50-stock-market-data&#39; . import os os.listdir(data_dir) . [&#39;HINDUNILVR.csv&#39;, &#39;GRASIM.csv&#39;, &#39;DRREDDY.csv&#39;, &#39;CIPLA.csv&#39;, &#39;ICICIBANK.csv&#39;, &#39;HDFC.csv&#39;, &#39;BAJAJ-AUTO.csv&#39;, &#39;RELIANCE.csv&#39;, &#39;WIPRO.csv&#39;, &#39;HCLTECH.csv&#39;, &#39;BPCL.csv&#39;, &#39;TECHM.csv&#39;, &#39;COALINDIA.csv&#39;, &#39;MM.csv&#39;, &#39;HINDALCO.csv&#39;, &#39;TATASTEEL.csv&#39;, &#39;INDUSINDBK.csv&#39;, &#39;HDFCBANK.csv&#39;, &#39;VEDL.csv&#39;, &#39;NESTLEIND.csv&#39;, &#39;LT.csv&#39;, &#39;ONGC.csv&#39;, &#39;UPL.csv&#39;, &#39;ITC.csv&#39;, &#39;BRITANNIA.csv&#39;, &#39;ZEEL.csv&#39;, &#39;BAJAJFINSV.csv&#39;, &#39;EICHERMOT.csv&#39;, &#39;TITAN.csv&#39;, &#39;TATAMOTORS.csv&#39;, &#39;NIFTY50_all.csv&#39;, &#39;IOC.csv&#39;, &#39;stock_metadata.csv&#39;, &#39;INFY.csv&#39;, &#39;POWERGRID.csv&#39;, &#39;MARUTI.csv&#39;, &#39;NTPC.csv&#39;, &#39;HEROMOTOCO.csv&#39;, &#39;SHREECEM.csv&#39;, &#39;ASIANPAINT.csv&#39;, &#39;ULTRACEMCO.csv&#39;, &#39;INFRATEL.csv&#39;, &#39;GAIL.csv&#39;, &#39;BAJFINANCE.csv&#39;, &#39;JSWSTEEL.csv&#39;, &#39;ADANIPORTS.csv&#39;, &#39;AXISBANK.csv&#39;, &#39;SUNPHARMA.csv&#39;, &#39;TCS.csv&#39;, &#39;BHARTIARTL.csv&#39;, &#39;KOTAKBANK.csv&#39;, &#39;SBIN.csv&#39;] . Let us save and upload our work to Jovian before continuing. . project_name = &quot;nifty50-stockmarket-data&quot; # change this (use lowercase letters and hyphens only) . !pip install jovian --upgrade -q . import jovian . jovian.commit(project=project_name) . [jovian] Updating notebook &#34;sandeshkatakam/axisbank-stockmarket-data-analysis&#34; on https://jovian.ai [jovian] Committed successfully! https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis . &#39;https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis&#39; . Data Preparation and Cleaning . Data Preparation and Cleansing constitutes the first part of the Data Analysis project for any dataset. We do this process inorder to obtain retain valuable data from the data frame, one that is relevant for our analysis. The process is also used to remove erroneous values from the dataset(ex. NaN to 0). After the preparation of data and cleansing, the data can be used for analysis.&lt;/br&gt; In our dataframe we have a lot of non-releavant information, so we are going to drop few columns in the dataframe and fix some of the elements in data frame for better analysis. We are also going to change the Date column into DateTime format which can be further used to group the data by months/year. . import pandas as pd import numpy as np . axis_df= pd.read_csv(data_dir + &quot;/AXISBANK.csv&quot;) . axis_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 5306 entries, 0 to 5305 Data columns (total 15 columns): # Column Non-Null Count Dtype -- -- 0 Date 5306 non-null object 1 Symbol 5306 non-null object 2 Series 5306 non-null object 3 Prev Close 5306 non-null float64 4 Open 5306 non-null float64 5 High 5306 non-null float64 6 Low 5306 non-null float64 7 Last 5306 non-null float64 8 Close 5306 non-null float64 9 VWAP 5306 non-null float64 10 Volume 5306 non-null int64 11 Turnover 5306 non-null float64 12 Trades 2456 non-null float64 13 Deliverable Volume 4797 non-null float64 14 %Deliverble 4797 non-null float64 dtypes: float64(11), int64(1), object(3) memory usage: 621.9+ KB . axis_df.describe() . Prev Close Open High Low Last Close VWAP Volume Turnover Trades Deliverable Volume %Deliverble . count 5306.000000 | 5306.000000 | 5306.000000 | 5306.000000 | 5306.000000 | 5306.000000 | 5306.000000 | 5.306000e+03 | 5.306000e+03 | 2456.000000 | 4.797000e+03 | 4797.000000 | . mean 585.763852 | 586.507388 | 596.476187 | 575.571598 | 585.897399 | 585.893931 | 586.077778 | 4.527938e+06 | 2.739871e+14 | 120602.231678 | 1.990907e+06 | 0.466962 | . std 436.714128 | 436.602194 | 443.044833 | 430.108921 | 436.609147 | 436.649765 | 436.611987 | 8.101940e+06 | 4.122431e+14 | 96106.654046 | 3.264587e+06 | 0.161808 | . min 22.150000 | 21.000000 | 23.700000 | 21.000000 | 22.150000 | 22.150000 | 22.170000 | 2.850000e+03 | 8.275250e+09 | 2698.000000 | 5.809000e+03 | 0.075000 | . 25% 230.950000 | 232.000000 | 235.125000 | 227.075000 | 230.550000 | 230.975000 | 231.115000 | 2.842172e+05 | 5.868745e+12 | 62228.250000 | 2.573130e+05 | 0.347500 | . 50% 519.450000 | 520.100000 | 528.400000 | 512.025000 | 519.425000 | 519.500000 | 519.505000 | 1.656966e+06 | 1.653257e+14 | 93186.500000 | 7.687680e+05 | 0.459800 | . 75% 877.312500 | 880.075000 | 897.987500 | 852.762500 | 877.275000 | 877.312500 | 875.807500 | 5.515245e+06 | 3.456528e+14 | 144973.250000 | 2.652520e+06 | 0.573900 | . max 2023.350000 | 2034.400000 | 2043.050000 | 2002.600000 | 2022.550000 | 2023.350000 | 2020.310000 | 1.205419e+08 | 7.179550e+15 | 990737.000000 | 9.490116e+07 | 0.983000 | . axis_df . Date Symbol Series Prev Close Open High Low Last Close VWAP Volume Turnover Trades Deliverable Volume %Deliverble . 0 2000-01-03 | UTIBANK | EQ | 24.70 | 26.7 | 26.70 | 26.70 | 26.70 | 26.70 | 26.70 | 112100 | 2.993070e+11 | NaN | NaN | NaN | . 1 2000-01-04 | UTIBANK | EQ | 26.70 | 27.0 | 28.70 | 26.50 | 27.00 | 26.85 | 27.24 | 234500 | 6.387275e+11 | NaN | NaN | NaN | . 2 2000-01-05 | UTIBANK | EQ | 26.85 | 26.0 | 27.75 | 25.50 | 26.40 | 26.30 | 26.24 | 170100 | 4.462980e+11 | NaN | NaN | NaN | . 3 2000-01-06 | UTIBANK | EQ | 26.30 | 25.8 | 27.00 | 25.80 | 25.90 | 25.95 | 26.27 | 102100 | 2.681730e+11 | NaN | NaN | NaN | . 4 2000-01-07 | UTIBANK | EQ | 25.95 | 25.0 | 26.00 | 24.25 | 25.00 | 24.80 | 25.04 | 62600 | 1.567220e+11 | NaN | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 5301 2021-04-26 | AXISBANK | EQ | 671.35 | 694.0 | 703.80 | 684.50 | 699.50 | 700.45 | 695.33 | 21646184 | 1.505120e+15 | 286480.0 | 5949937.0 | 0.2749 | . 5302 2021-04-27 | AXISBANK | EQ | 700.45 | 691.1 | 703.90 | 684.10 | 700.90 | 699.55 | 692.83 | 46559967 | 3.225830e+15 | 289445.0 | 18080082.0 | 0.3883 | . 5303 2021-04-28 | AXISBANK | EQ | 699.55 | 708.0 | 712.50 | 688.15 | 705.95 | 708.15 | 701.92 | 54060587 | 3.794635e+15 | 507747.0 | 17851331.0 | 0.3302 | . 5304 2021-04-29 | AXISBANK | EQ | 708.15 | 712.0 | 726.90 | 707.00 | 717.10 | 719.40 | 717.41 | 25939327 | 1.860920e+15 | 312079.0 | 7357520.0 | 0.2836 | . 5305 2021-04-30 | AXISBANK | EQ | 719.40 | 705.0 | 729.85 | 705.00 | 711.65 | 714.90 | 719.36 | 23011654 | 1.655365e+15 | 232879.0 | 6786072.0 | 0.2949 | . 5306 rows × 15 columns . axis_df[&#39;Symbol&#39;] = np.where(axis_df[&#39;Symbol&#39;] == &#39;UTIBANK&#39;, &#39;AXISBANK&#39;, axis_df[&#39;Symbol&#39;]) axis_df . Date Symbol Series Prev Close Open High Low Last Close VWAP Volume Turnover Trades Deliverable Volume %Deliverble . 0 2000-01-03 | AXISBANK | EQ | 24.70 | 26.7 | 26.70 | 26.70 | 26.70 | 26.70 | 26.70 | 112100 | 2.993070e+11 | NaN | NaN | NaN | . 1 2000-01-04 | AXISBANK | EQ | 26.70 | 27.0 | 28.70 | 26.50 | 27.00 | 26.85 | 27.24 | 234500 | 6.387275e+11 | NaN | NaN | NaN | . 2 2000-01-05 | AXISBANK | EQ | 26.85 | 26.0 | 27.75 | 25.50 | 26.40 | 26.30 | 26.24 | 170100 | 4.462980e+11 | NaN | NaN | NaN | . 3 2000-01-06 | AXISBANK | EQ | 26.30 | 25.8 | 27.00 | 25.80 | 25.90 | 25.95 | 26.27 | 102100 | 2.681730e+11 | NaN | NaN | NaN | . 4 2000-01-07 | AXISBANK | EQ | 25.95 | 25.0 | 26.00 | 24.25 | 25.00 | 24.80 | 25.04 | 62600 | 1.567220e+11 | NaN | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 5301 2021-04-26 | AXISBANK | EQ | 671.35 | 694.0 | 703.80 | 684.50 | 699.50 | 700.45 | 695.33 | 21646184 | 1.505120e+15 | 286480.0 | 5949937.0 | 0.2749 | . 5302 2021-04-27 | AXISBANK | EQ | 700.45 | 691.1 | 703.90 | 684.10 | 700.90 | 699.55 | 692.83 | 46559967 | 3.225830e+15 | 289445.0 | 18080082.0 | 0.3883 | . 5303 2021-04-28 | AXISBANK | EQ | 699.55 | 708.0 | 712.50 | 688.15 | 705.95 | 708.15 | 701.92 | 54060587 | 3.794635e+15 | 507747.0 | 17851331.0 | 0.3302 | . 5304 2021-04-29 | AXISBANK | EQ | 708.15 | 712.0 | 726.90 | 707.00 | 717.10 | 719.40 | 717.41 | 25939327 | 1.860920e+15 | 312079.0 | 7357520.0 | 0.2836 | . 5305 2021-04-30 | AXISBANK | EQ | 719.40 | 705.0 | 729.85 | 705.00 | 711.65 | 714.90 | 719.36 | 23011654 | 1.655365e+15 | 232879.0 | 6786072.0 | 0.2949 | . 5306 rows × 15 columns . axis_new_df = axis_df.drop([&#39;Last&#39;,&#39;Series&#39;, &#39;VWAP&#39;, &#39;Trades&#39;,&#39;Deliverable Volume&#39;,&#39;%Deliverble&#39;], axis=1) axis_new_df . Date Symbol Prev Close Open High Low Close Volume Turnover . 0 2000-01-03 | AXISBANK | 24.70 | 26.7 | 26.70 | 26.70 | 26.70 | 112100 | 2.993070e+11 | . 1 2000-01-04 | AXISBANK | 26.70 | 27.0 | 28.70 | 26.50 | 26.85 | 234500 | 6.387275e+11 | . 2 2000-01-05 | AXISBANK | 26.85 | 26.0 | 27.75 | 25.50 | 26.30 | 170100 | 4.462980e+11 | . 3 2000-01-06 | AXISBANK | 26.30 | 25.8 | 27.00 | 25.80 | 25.95 | 102100 | 2.681730e+11 | . 4 2000-01-07 | AXISBANK | 25.95 | 25.0 | 26.00 | 24.25 | 24.80 | 62600 | 1.567220e+11 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 5301 2021-04-26 | AXISBANK | 671.35 | 694.0 | 703.80 | 684.50 | 700.45 | 21646184 | 1.505120e+15 | . 5302 2021-04-27 | AXISBANK | 700.45 | 691.1 | 703.90 | 684.10 | 699.55 | 46559967 | 3.225830e+15 | . 5303 2021-04-28 | AXISBANK | 699.55 | 708.0 | 712.50 | 688.15 | 708.15 | 54060587 | 3.794635e+15 | . 5304 2021-04-29 | AXISBANK | 708.15 | 712.0 | 726.90 | 707.00 | 719.40 | 25939327 | 1.860920e+15 | . 5305 2021-04-30 | AXISBANK | 719.40 | 705.0 | 729.85 | 705.00 | 714.90 | 23011654 | 1.655365e+15 | . 5306 rows × 9 columns . def getIndexes(dfObj, value): &#39;&#39;&#39; Get index positions of value in dataframe i.e. dfObj.&#39;&#39;&#39; listOfPos = list() # Get bool dataframe with True at positions where the given value exists result = dfObj.isin([value]) # Get list of columns that contains the value seriesObj = result.any() columnNames = list(seriesObj[seriesObj == True].index) # Iterate over list of columns and fetch the rows indexes where value exists for col in columnNames: rows = list(result[col][result[col] == True].index) for row in rows: listOfPos.append((row, col)) # Return a list of tuples indicating the positions of value in the dataframe return listOfPos . listOfPosition_axis = getIndexes(axis_df, &#39;2019-01-01&#39;) listOfPosition_axis . [(4729, &#39;Date&#39;)] . axis_new_df.drop(axis_new_df.loc[0:4728].index, inplace = True) . axis_new_df . Date Symbol Prev Close Open High Low Close Volume Turnover . 4729 2019-01-01 | AXISBANK | 619.90 | 621.9 | 630.20 | 621.90 | 627.30 | 12179223 | 7.609460e+14 | . 4730 2019-01-02 | AXISBANK | 627.30 | 623.0 | 628.50 | 617.50 | 620.05 | 12386281 | 7.720546e+14 | . 4731 2019-01-03 | AXISBANK | 620.05 | 621.4 | 622.00 | 603.65 | 607.95 | 13228602 | 8.092834e+14 | . 4732 2019-01-04 | AXISBANK | 607.95 | 612.0 | 624.75 | 609.50 | 619.60 | 8381367 | 5.178678e+14 | . 4733 2019-01-07 | AXISBANK | 619.60 | 626.0 | 640.70 | 624.20 | 637.45 | 11735286 | 7.463059e+14 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 5301 2021-04-26 | AXISBANK | 671.35 | 694.0 | 703.80 | 684.50 | 700.45 | 21646184 | 1.505120e+15 | . 5302 2021-04-27 | AXISBANK | 700.45 | 691.1 | 703.90 | 684.10 | 699.55 | 46559967 | 3.225830e+15 | . 5303 2021-04-28 | AXISBANK | 699.55 | 708.0 | 712.50 | 688.15 | 708.15 | 54060587 | 3.794635e+15 | . 5304 2021-04-29 | AXISBANK | 708.15 | 712.0 | 726.90 | 707.00 | 719.40 | 25939327 | 1.860920e+15 | . 5305 2021-04-30 | AXISBANK | 719.40 | 705.0 | 729.85 | 705.00 | 714.90 | 23011654 | 1.655365e+15 | . 577 rows × 9 columns . Summary of the operations done till now: . we have taken a csv file containing stock data of AXIS BANK from the data set of nifty50 stocks and performed data cleansing operations on them.&lt;/br&gt; | Originally, the data from the data set is noticed as stock price quotations from the year 2001 but for our analysis we have taken data for the years 2019-2021&lt;/br&gt; | Then we have dropped the columns that are not relevant for our analysis by using pandas dataframe operations. | axis_new_df.reset_index(drop=True, inplace=True) axis_new_df . Date Symbol Prev Close Open High Low Close Volume Turnover . 0 2019-01-01 | AXISBANK | 619.90 | 621.9 | 630.20 | 621.90 | 627.30 | 12179223 | 7.609460e+14 | . 1 2019-01-02 | AXISBANK | 627.30 | 623.0 | 628.50 | 617.50 | 620.05 | 12386281 | 7.720546e+14 | . 2 2019-01-03 | AXISBANK | 620.05 | 621.4 | 622.00 | 603.65 | 607.95 | 13228602 | 8.092834e+14 | . 3 2019-01-04 | AXISBANK | 607.95 | 612.0 | 624.75 | 609.50 | 619.60 | 8381367 | 5.178678e+14 | . 4 2019-01-07 | AXISBANK | 619.60 | 626.0 | 640.70 | 624.20 | 637.45 | 11735286 | 7.463059e+14 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 572 2021-04-26 | AXISBANK | 671.35 | 694.0 | 703.80 | 684.50 | 700.45 | 21646184 | 1.505120e+15 | . 573 2021-04-27 | AXISBANK | 700.45 | 691.1 | 703.90 | 684.10 | 699.55 | 46559967 | 3.225830e+15 | . 574 2021-04-28 | AXISBANK | 699.55 | 708.0 | 712.50 | 688.15 | 708.15 | 54060587 | 3.794635e+15 | . 575 2021-04-29 | AXISBANK | 708.15 | 712.0 | 726.90 | 707.00 | 719.40 | 25939327 | 1.860920e+15 | . 576 2021-04-30 | AXISBANK | 719.40 | 705.0 | 729.85 | 705.00 | 714.90 | 23011654 | 1.655365e+15 | . 577 rows × 9 columns . axis_new_df[&#39;Date&#39;] = pd.to_datetime(axis_new_df[&#39;Date&#39;]) # we changed the Dates into Datetime format from the object format axis_new_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 577 entries, 0 to 576 Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 Date 577 non-null datetime64[ns] 1 Symbol 577 non-null object 2 Prev Close 577 non-null float64 3 Open 577 non-null float64 4 High 577 non-null float64 5 Low 577 non-null float64 6 Close 577 non-null float64 7 Volume 577 non-null int64 8 Turnover 577 non-null float64 dtypes: datetime64[ns](1), float64(6), int64(1), object(1) memory usage: 40.7+ KB . axis_new_df[&#39;Daily Lag&#39;] = axis_new_df[&#39;Close&#39;].shift(1) # Added a new column Daily Lag to calculate daily returns of the stock axis_new_df[&#39;Daily Returns&#39;] = (axis_new_df[&#39;Daily Lag&#39;]/axis_new_df[&#39;Close&#39;]) -1 . axis_dailyret_df = axis_new_df.drop([&#39;Prev Close&#39;, &#39;Open&#39;,&#39;High&#39;, &#39;Low&#39;,&#39;Close&#39;,&#39;Daily Lag&#39;], axis = 1) . axis_dailyret_df . Date Symbol Volume Turnover Daily Returns . 0 2019-01-01 | AXISBANK | 12179223 | 7.609460e+14 | NaN | . 1 2019-01-02 | AXISBANK | 12386281 | 7.720546e+14 | 0.011693 | . 2 2019-01-03 | AXISBANK | 13228602 | 8.092834e+14 | 0.019903 | . 3 2019-01-04 | AXISBANK | 8381367 | 5.178678e+14 | -0.018802 | . 4 2019-01-07 | AXISBANK | 11735286 | 7.463059e+14 | -0.028002 | . ... ... | ... | ... | ... | ... | . 572 2021-04-26 | AXISBANK | 21646184 | 1.505120e+15 | -0.041545 | . 573 2021-04-27 | AXISBANK | 46559967 | 3.225830e+15 | 0.001287 | . 574 2021-04-28 | AXISBANK | 54060587 | 3.794635e+15 | -0.012144 | . 575 2021-04-29 | AXISBANK | 25939327 | 1.860920e+15 | -0.015638 | . 576 2021-04-30 | AXISBANK | 23011654 | 1.655365e+15 | 0.006295 | . 577 rows × 5 columns . import jovian . jovian.commit() . [jovian] Updating notebook &#34;sandeshkatakam/axisbank-stockmarket-data-analysis&#34; on https://jovian.ai [jovian] Committed successfully! https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis . &#39;https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis&#39; . Exploratory Analysis and Visualization . Here we compute the mean, max/min stock quotes of the stock AXISBANK. We specifically compute the mean of the Daily returns column. we are going to do the analysis by first converting the index datewise to month wise to have a good consolidated dataframe to analyze in broad timeline. we are going to divide the data frame into three for the years 2019, 2020, 2021 respectively, in order to analyze the yearly performance of the stock. . Let&#39;s begin by importingmatplotlib.pyplot and seaborn. . import seaborn as sns import matplotlib import matplotlib.pyplot as plt %matplotlib inline sns.set_style(&#39;darkgrid&#39;) matplotlib.rcParams[&#39;font.size&#39;] = 10 matplotlib.rcParams[&#39;figure.figsize&#39;] = (15, 5) matplotlib.rcParams[&#39;figure.facecolor&#39;] = &#39;#00000000&#39; . Here we are going to explore the daily Returns column by plotting a line graph of daily returns v/s Months. Now we can see that daily returns are growing across months in the years 2019-2021. . axis_dailyret_plot=axis_dailyret_df.groupby(axis_dailyret_df[&#39;Date&#39;].dt.strftime(&#39;%B&#39;))[&#39;Daily Returns&#39;].sum().sort_values() plt.plot(axis_dailyret_plot) . [&lt;matplotlib.lines.Line2D at 0x7fd4abea4400&gt;] . axis_new_df[&#39;Year&#39;] = pd.DatetimeIndex(axis_new_df[&#39;Date&#39;]).year axis_new_df . Date Symbol Prev Close Open High Low Close Volume Turnover Daily Lag Daily Returns Year . 0 2019-01-01 | AXISBANK | 619.90 | 621.9 | 630.20 | 621.90 | 627.30 | 12179223 | 7.609460e+14 | NaN | NaN | 2019 | . 1 2019-01-02 | AXISBANK | 627.30 | 623.0 | 628.50 | 617.50 | 620.05 | 12386281 | 7.720546e+14 | 627.30 | 0.011693 | 2019 | . 2 2019-01-03 | AXISBANK | 620.05 | 621.4 | 622.00 | 603.65 | 607.95 | 13228602 | 8.092834e+14 | 620.05 | 0.019903 | 2019 | . 3 2019-01-04 | AXISBANK | 607.95 | 612.0 | 624.75 | 609.50 | 619.60 | 8381367 | 5.178678e+14 | 607.95 | -0.018802 | 2019 | . 4 2019-01-07 | AXISBANK | 619.60 | 626.0 | 640.70 | 624.20 | 637.45 | 11735286 | 7.463059e+14 | 619.60 | -0.028002 | 2019 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 572 2021-04-26 | AXISBANK | 671.35 | 694.0 | 703.80 | 684.50 | 700.45 | 21646184 | 1.505120e+15 | 671.35 | -0.041545 | 2021 | . 573 2021-04-27 | AXISBANK | 700.45 | 691.1 | 703.90 | 684.10 | 699.55 | 46559967 | 3.225830e+15 | 700.45 | 0.001287 | 2021 | . 574 2021-04-28 | AXISBANK | 699.55 | 708.0 | 712.50 | 688.15 | 708.15 | 54060587 | 3.794635e+15 | 699.55 | -0.012144 | 2021 | . 575 2021-04-29 | AXISBANK | 708.15 | 712.0 | 726.90 | 707.00 | 719.40 | 25939327 | 1.860920e+15 | 708.15 | -0.015638 | 2021 | . 576 2021-04-30 | AXISBANK | 719.40 | 705.0 | 729.85 | 705.00 | 714.90 | 23011654 | 1.655365e+15 | 719.40 | 0.006295 | 2021 | . 577 rows × 12 columns . axis2019_df = axis_new_df[axis_new_df.Year == 2019 ] axis2020_df = axis_new_df[axis_new_df.Year == 2020 ] axis2021_df = axis_new_df[axis_new_df.Year == 2021 ] . axis2019_df.reset_index(drop = True, inplace = True) axis2019_df . Date Symbol Prev Close Open High Low Close Volume Turnover Daily Lag Daily Returns Year . 0 2019-01-01 | AXISBANK | 619.90 | 621.90 | 630.20 | 621.90 | 627.30 | 12179223 | 7.609460e+14 | NaN | NaN | 2019 | . 1 2019-01-02 | AXISBANK | 627.30 | 623.00 | 628.50 | 617.50 | 620.05 | 12386281 | 7.720546e+14 | 627.30 | 0.011693 | 2019 | . 2 2019-01-03 | AXISBANK | 620.05 | 621.40 | 622.00 | 603.65 | 607.95 | 13228602 | 8.092834e+14 | 620.05 | 0.019903 | 2019 | . 3 2019-01-04 | AXISBANK | 607.95 | 612.00 | 624.75 | 609.50 | 619.60 | 8381367 | 5.178678e+14 | 607.95 | -0.018802 | 2019 | . 4 2019-01-07 | AXISBANK | 619.60 | 626.00 | 640.70 | 624.20 | 637.45 | 11735286 | 7.463059e+14 | 619.60 | -0.028002 | 2019 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 240 2019-12-24 | AXISBANK | 743.15 | 744.50 | 744.70 | 737.80 | 740.65 | 3642916 | 2.698164e+14 | 743.15 | 0.003375 | 2019 | . 241 2019-12-26 | AXISBANK | 740.65 | 737.50 | 740.65 | 733.90 | 736.50 | 7919368 | 5.836254e+14 | 740.65 | 0.005635 | 2019 | . 242 2019-12-27 | AXISBANK | 736.50 | 739.00 | 762.00 | 736.30 | 760.15 | 10736285 | 8.089429e+14 | 736.50 | -0.031112 | 2019 | . 243 2019-12-30 | AXISBANK | 760.15 | 760.90 | 765.75 | 751.05 | 754.10 | 10034206 | 7.598128e+14 | 760.15 | 0.008023 | 2019 | . 244 2019-12-31 | AXISBANK | 754.10 | 753.85 | 765.85 | 751.40 | 754.10 | 11660781 | 8.842549e+14 | 754.10 | 0.000000 | 2019 | . 245 rows × 12 columns . axis2020_df.reset_index(drop = True, inplace = True) axis2020_df . Date Symbol Prev Close Open High Low Close Volume Turnover Daily Lag Daily Returns Year . 0 2020-01-01 | AXISBANK | 754.10 | 754.90 | 759.95 | 747.20 | 748.70 | 4917748 | 3.697221e+14 | 754.10 | 0.007213 | 2020 | . 1 2020-01-02 | AXISBANK | 748.70 | 750.00 | 759.00 | 747.60 | 756.95 | 5156046 | 3.886739e+14 | 748.70 | -0.010899 | 2020 | . 2 2020-01-03 | AXISBANK | 756.95 | 753.15 | 756.25 | 740.50 | 742.95 | 8489729 | 6.336165e+14 | 756.95 | 0.018844 | 2020 | . 3 2020-01-06 | AXISBANK | 742.95 | 739.45 | 739.60 | 721.70 | 723.25 | 6356198 | 4.631502e+14 | 742.95 | 0.027238 | 2020 | . 4 2020-01-07 | AXISBANK | 723.25 | 728.00 | 738.00 | 721.05 | 725.75 | 9103360 | 6.630907e+14 | 723.25 | -0.003445 | 2020 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 247 2020-12-24 | AXISBANK | 592.45 | 595.00 | 614.00 | 594.15 | 610.20 | 15488083 | 9.422775e+14 | 592.45 | -0.029089 | 2020 | . 248 2020-12-28 | AXISBANK | 610.20 | 614.00 | 620.80 | 614.00 | 617.65 | 8444506 | 5.220025e+14 | 610.20 | -0.012062 | 2020 | . 249 2020-12-29 | AXISBANK | 617.65 | 620.70 | 632.40 | 618.60 | 630.20 | 13765454 | 8.632919e+14 | 617.65 | -0.019914 | 2020 | . 250 2020-12-30 | AXISBANK | 630.20 | 632.25 | 634.00 | 618.20 | 625.10 | 10262221 | 6.407812e+14 | 630.20 | 0.008159 | 2020 | . 251 2020-12-31 | AXISBANK | 625.10 | 622.40 | 625.95 | 616.00 | 620.45 | 12306502 | 7.636264e+14 | 625.10 | 0.007495 | 2020 | . 252 rows × 12 columns . axis2021_df.reset_index(drop=True, inplace=True) axis2021_df . Date Symbol Prev Close Open High Low Close Volume Turnover Daily Lag Daily Returns Year . 0 2021-01-01 | AXISBANK | 620.45 | 620.25 | 625.45 | 617.55 | 623.80 | 6047062 | 3.762202e+14 | 620.45 | -0.005370 | 2021 | . 1 2021-01-04 | AXISBANK | 623.80 | 627.80 | 633.00 | 621.30 | 624.70 | 14068156 | 8.811802e+14 | 623.80 | -0.001441 | 2021 | . 2 2021-01-05 | AXISBANK | 624.70 | 618.00 | 667.90 | 618.00 | 664.45 | 37973963 | 2.467637e+15 | 624.70 | -0.059824 | 2021 | . 3 2021-01-06 | AXISBANK | 664.45 | 662.00 | 667.15 | 649.15 | 654.25 | 20829645 | 1.373394e+15 | 664.45 | 0.015590 | 2021 | . 4 2021-01-07 | AXISBANK | 654.25 | 659.00 | 676.50 | 659.00 | 671.10 | 17887570 | 1.196294e+15 | 654.25 | -0.025108 | 2021 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 75 2021-04-26 | AXISBANK | 671.35 | 694.00 | 703.80 | 684.50 | 700.45 | 21646184 | 1.505120e+15 | 671.35 | -0.041545 | 2021 | . 76 2021-04-27 | AXISBANK | 700.45 | 691.10 | 703.90 | 684.10 | 699.55 | 46559967 | 3.225830e+15 | 700.45 | 0.001287 | 2021 | . 77 2021-04-28 | AXISBANK | 699.55 | 708.00 | 712.50 | 688.15 | 708.15 | 54060587 | 3.794635e+15 | 699.55 | -0.012144 | 2021 | . 78 2021-04-29 | AXISBANK | 708.15 | 712.00 | 726.90 | 707.00 | 719.40 | 25939327 | 1.860920e+15 | 708.15 | -0.015638 | 2021 | . 79 2021-04-30 | AXISBANK | 719.40 | 705.00 | 729.85 | 705.00 | 714.90 | 23011654 | 1.655365e+15 | 719.40 | 0.006295 | 2021 | . 80 rows × 12 columns . Summary of above exploratory Analysis: . In the above code cells, we performed plotting of the data by exploring a column from the data. We have divided the DataFrame into three data frames containing the stock quote data from year-wise i.e., for the years 2019, 2020, 2021. For dividing the DataFrame year-wise we have added a new column called &#39;Year&#39; which is generated from the DataTime values of the column &quot;Date&quot;. . axis_range_df = axis_dailyret_df[&#39;Daily Returns&#39;].max() - axis_dailyret_df[&#39;Daily Returns&#39;].min() axis_range_df . 0.55021480949789 . axis_mean_df = axis_dailyret_df[&#39;Daily Returns&#39;].mean() axis_mean_df . 0.0002473086431186587 . In the above two code cells, we have computed the range i.e. the difference between maximum and minimum value of the column. We have also calculated the mean of the daily returns of the Axis Bank stock. . Exploratory Analysis of stock quotes year-wise for Axis Bank: . In this section we have plotted the Closing values of the stock throughout the year for the years 2019,2020,2021. We have only partial data for 2021(i.e. till Apr 2021). We have also done a plot to compare the performance throughout the year for the years 2019 and 2020(since we had full data for the respective years). . plt.plot(axis2019_df[&#39;Date&#39;],axis2019_df[&#39;Close&#39;] ) plt.title(&#39;Closing Values of stock for the year 2019&#39;) plt.xlabel(None) plt.ylabel(&#39;Closing price of the stock&#39;) . Text(0, 0.5, &#39;Closing price of the stock&#39;) . plt.plot(axis2020_df[&#39;Date&#39;],axis2020_df[&#39;Close&#39;]) plt.title(&#39;Closing Values of stock for the year 2020&#39;) plt.xlabel(None) plt.ylabel(&#39;Closing price of the stock&#39;) . Text(0, 0.5, &#39;Closing price of the stock&#39;) . plt.plot(axis2021_df[&#39;Date&#39;],axis2021_df[&#39;Close&#39;]) plt.title(&#39;Closing Values of stock for the year 2021 Till April Month&#39;) plt.xlabel(None) plt.ylabel(&#39;Closing price of the stock&#39;) . Text(0, 0.5, &#39;Closing price of the stock&#39;) . TODO - Explore one or more columns by plotting a graph below, and add some explanation about it . plt.style.use(&#39;fivethirtyeight&#39;) plt.plot(axis2019_df[&#39;Date&#39;], axis2019_df[&#39;Close&#39;],linewidth=3, label = &#39;2019&#39;) plt.plot(axis2020_df[&quot;Date&quot;],axis2020_df[&#39;Close&#39;],linewidth=3, label = &#39;2020&#39;) plt.legend(loc=&#39;best&#39; ) plt.title(&#39;Closing Values of stock for the years 2019 and 2020&#39;) plt.xlabel(None) plt.ylabel(&#39;Closing price of the stock&#39;) . Text(0, 0.5, &#39;Closing price of the stock&#39;) . print(plt.style.available) . [&#39;Solarize_Light2&#39;, &#39;_classic_test_patch&#39;, &#39;bmh&#39;, &#39;classic&#39;, &#39;dark_background&#39;, &#39;fast&#39;, &#39;fivethirtyeight&#39;, &#39;ggplot&#39;, &#39;grayscale&#39;, &#39;seaborn&#39;, &#39;seaborn-bright&#39;, &#39;seaborn-colorblind&#39;, &#39;seaborn-dark&#39;, &#39;seaborn-dark-palette&#39;, &#39;seaborn-darkgrid&#39;, &#39;seaborn-deep&#39;, &#39;seaborn-muted&#39;, &#39;seaborn-notebook&#39;, &#39;seaborn-paper&#39;, &#39;seaborn-pastel&#39;, &#39;seaborn-poster&#39;, &#39;seaborn-talk&#39;, &#39;seaborn-ticks&#39;, &#39;seaborn-white&#39;, &#39;seaborn-whitegrid&#39;, &#39;tableau-colorblind10&#39;] . Let us save and upload our work to Jovian before continuing . import jovian . jovian.commit() . [jovian] Updating notebook &#34;sandeshkatakam/axisbank-stockmarket-data-analysis&#34; on https://jovian.ai [jovian] Committed successfully! https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis . &#39;https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis&#39; . Asking and Answering Questions . In this section, we are going to answer some of the questions regarding the dataset using various data analysis libraries like Numpy, Pandas, Matplotlib and seaborn. By using the tools we can see how useful the libraries come in handy while doing Inference on a dataset. . Instructions (delete this cell) . Ask at least 5 interesting questions about your dataset | Answer the questions either by computing the results using Numpy/Pandas or by plotting graphs using Matplotlib/Seaborn | Create new columns, merge multiple dataset and perform grouping/aggregation wherever necessary | Wherever you&#39;re using a library function from Pandas/Numpy/Matplotlib etc. explain briefly what it does | . Q1: What was the change in price and volume of the stock traded overtime? . plt.plot(axis2019_df[&#39;Date&#39;], axis2019_df[&#39;Close&#39;],linewidth=3, label = &#39;2019&#39;) plt.plot(axis2020_df[&quot;Date&quot;],axis2020_df[&#39;Close&#39;],linewidth=3, label = &#39;2020&#39;) plt.plot(axis2021_df[&quot;Date&quot;], axis2021_df[&#39;Close&#39;],linewidth = 3, label = &#39;2021&#39;) plt.legend(loc=&#39;best&#39; ) plt.title(&#39;Closing Price of stock for the years 2019-2021(Till April)&#39;) plt.xlabel(None) plt.ylabel(&#39;Closing price of the stock&#39;) . Text(0, 0.5, &#39;Closing price of the stock&#39;) . print(&#39;The Maximum closing price of the stock during 2019-2021 is&#39;,axis_new_df[&#39;Close&#39;].max()) print(&#39;The Minimum closing price of the stock during 2019-2021 is&#39;,axis_new_df[&#39;Close&#39;].min()) print(&#39;The Index for the Maximum closing price in the dataframe is&#39;,getIndexes(axis_new_df, axis_new_df[&#39;Close&#39;].max())) print(&#39;The Index for the Minimum closing price in the dataframe is&#39;,getIndexes(axis_new_df, axis_new_df[&#39;Close&#39;].min())) print(axis_new_df.iloc[104]) print(axis_new_df.iloc[303]) . The Maximum closing price of the stock during 2019-2021 is 822.8 The Minimum closing price of the stock during 2019-2021 is 303.15 The Index for the Maximum closing price in the dataframe is [(105, &#39;Prev Close&#39;), (104, &#39;Close&#39;), (105, &#39;Daily Lag&#39;)] The Index for the Minimum closing price in the dataframe is [(304, &#39;Prev Close&#39;), (303, &#39;Close&#39;), (304, &#39;Daily Lag&#39;)] Date 2019-06-04 00:00:00 Symbol AXISBANK Prev Close 812.65 Open 807.55 High 827.75 Low 805.5 Close 822.8 Volume 9515354 Turnover 778700415970000.0 Daily Lag 812.65 Daily Returns -0.012336 Year 2019 Name: 104, dtype: object Date 2020-03-24 00:00:00 Symbol AXISBANK Prev Close 308.65 Open 331.95 High 337.5 Low 291.0 Close 303.15 Volume 50683611 Turnover 1578313503950000.0 Daily Lag 308.65 Daily Returns 0.018143 Year 2020 Name: 303, dtype: object . As we can see from the above one of the two plots there was a dip in the closing price during the year 2020. The Maximum Closing price occurred on 2019-06-04(Close = 822.8). The lowest of closing price during the years occurred on 2020-03-24(Close = 303.15). This can say that the start of the pandemic has caused the steep down curve for the stock&#39;s closing price. | . plt.plot(axis2019_df[&quot;Date&quot;],axis2019_df[&quot;Volume&quot;],linewidth=2, label = &#39;2019&#39;) plt.plot(axis2020_df[&quot;Date&quot;],axis2020_df[&quot;Volume&quot;],linewidth=2, label = &#39;2020&#39;) plt.plot(axis2021_df[&quot;Date&quot;],axis2021_df[&quot;Volume&quot;],linewidth=2, label = &#39;2021&#39;) plt.legend(loc=&#39;best&#39;) plt.title(&#39;Volume of stock traded in the years 2019-2021(till April)&#39;) plt.ylabel(&#39;Volume&#39;) plt.xlabel(None) . Text(0.5, 0, &#39;&#39;) . print(&#39;The Maximum volume of the stock traded during 2019-2021 is&#39;,axis_new_df[&#39;Volume&#39;].max()) print(&#39;The Minimum volume of the stock traded during 2019-2021 is&#39;,axis_new_df[&#39;Volume&#39;].min()) print(&#39;The Index for the Maximum volume stock traded in the dataframe is&#39;,getIndexes(axis_new_df, axis_new_df[&#39;Volume&#39;].max())) print(&#39;The Index for the Minimum volume stock traded in the dataframe is&#39;,getIndexes(axis_new_df, axis_new_df[&#39;Volume&#39;].min())) print(axis_new_df.iloc[357]) print(axis_new_df.iloc[200]) . The Maximum volume of the stock traded during 2019-2021 is 96190274 The Minimum volume of the stock traded during 2019-2021 is 965772 The Index for the Maximum volume stock traded in the dataframe is [(357, &#39;Volume&#39;)] The Index for the Minimum volume stock traded in the dataframe is [(200, &#39;Volume&#39;)] Date 2020-06-16 00:00:00 Symbol AXISBANK Prev Close 389.6 Open 404.9 High 405.0 Low 360.4 Close 381.55 Volume 96190274 Turnover 3654065942305001.0 Daily Lag 389.6 Daily Returns 0.021098 Year 2020 Name: 357, dtype: object Date 2019-10-27 00:00:00 Symbol AXISBANK Prev Close 708.6 Open 711.0 High 715.05 Low 708.55 Close 710.1 Volume 965772 Turnover 68696126654999.992188 Daily Lag 708.6 Daily Returns -0.002112 Year 2019 Name: 200, dtype: object . As we can see from the above graph a lot of volume of trade happened during 2020. That means the stock was transacted a lot during the year 2020. The highest Volumed of stock is traded on 2020-06-16(Volume =96190274) and the Minimum volume of the stock traded during 2019-2021 is on 2019-10-27(Volume = 965772) . Q2: What was the daily return of the stock on average? . The daily return measures the price change in a stock&#39;s price as a percentage of the previous day&#39;s closing price. A positive return means the stock has grown in value, while a negative return means it has lost value. we will also attempt to calculate the maximum daily return of the stock during 2019-2021. . plt.plot(axis_new_df[&#39;Date&#39;],axis_new_df[&#39;Daily Returns&#39;], linewidth=2 ,label = &#39;Daily Returns&#39;) plt.legend(loc=&#39;best&#39; ) plt.title(&#39;Daily Returns of stock for the years 2019-2021(Till April)&#39;) plt.xlabel(None) plt.ylabel(&#39;Daily Returns of the stock&#39;) . Text(0, 0.5, &#39;Daily Returns of the stock&#39;) . plt.plot(axis_new_df[&#39;Date&#39;],axis_new_df[&#39;Daily Returns&#39;], linestyle=&#39;--&#39;, marker=&#39;o&#39;) plt.title(&#39;Daily Returns of stock for the years 2019-2021(Till April)&#39;) plt.xlabel(None) plt.ylabel(&#39;Daily Returns of the stock&#39;) . Text(0, 0.5, &#39;Daily Returns of the stock&#39;) . print(&#39;The Maximum daily return during the years 2020 is&#39;,axis_new_df[&#39;Daily Returns&#39;].max()) index = getIndexes(axis_new_df, axis_new_df[&#39;Daily Returns&#39;].max()) axis_new_df.iloc[302] . The Maximum daily return during the years 2020 is 0.3871699335817269 . Date 2020-03-23 00:00:00 Symbol AXISBANK Prev Close 428.15 Open 385.35 High 392.0 Low 302.0 Close 308.65 Volume 37622791 Turnover 1253563689110000.0 Daily Lag 428.15 Daily Returns 0.38717 Year 2020 Name: 302, dtype: object . def getIndexes(dfObj, value): &#39;&#39;&#39; Get index positions of value in dataframe i.e. dfObj.&#39;&#39;&#39; listOfPos = list() # Get bool dataframe with True at positions where the given value exists result = dfObj.isin([value]) # Get list of columns that contains the value seriesObj = result.any() columnNames = list(seriesObj[seriesObj == True].index) # Iterate over list of columns and fetch the rows indexes where value exists for col in columnNames: rows = list(result[col][result[col] == True].index) for row in rows: listOfPos.append((row, col)) # Return a list of tuples indicating the positions of value in the dataframe return listOfPos . As we can see from the plot there were high daily returns for the stock around late March 2020 and then there was ups and downs from April- July 2020 . we can see that the most changes in daily returns occurred during April 2020 - July 2020 and at other times the daily returns were almost flat. The maximum daily returns for the stock during 2019-2021 occurred on 2020-03-23(observed from the pandas table above). . Avgdailyret_2019 =axis2019_df[&#39;Daily Returns&#39;].sum()/len(axis2019_df[&#39;Daily Returns&#39;]) Avgdailyret_2020 =axis2020_df[&#39;Daily Returns&#39;].sum()/len(axis2020_df[&#39;Daily Returns&#39;]) Avgdailyret_2021 =axis2021_df[&#39;Daily Returns&#39;].sum()/len(axis2021_df[&#39;Daily Returns&#39;]) # create a dataset data_dailyret = {&#39;2019&#39;: Avgdailyret_2019, &#39;2020&#39;:Avgdailyret_2020, &#39;2021&#39;:Avgdailyret_2021} Years = list(data_dailyret.keys()) Avgdailyret = list(data_dailyret.values()) # plotting a bar chart plt.figure(figsize=(10, 7)) plt.bar(Years, Avgdailyret, color =&#39;maroon&#39;,width = 0.3) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Average Daily Returns of the Stock Traded&quot;) plt.title(&quot;Average Daily Returns of the Stock over the years 2019-2021(Till April) (in 10^7)&quot;) plt.show() . plt.figure(figsize=(12, 7)) sns.distplot(axis_new_df[&#39;Daily Returns&#39;].dropna(), bins=100, color=&#39;purple&#39;) plt.title(&#39; Histogram of Daily Returns&#39;) plt.tight_layout() . /opt/conda/lib/python3.9/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . Q3: What is the Average Trading volume of the stock for past three years? . Avgvol_2019 =axis2019_df[&#39;Volume&#39;].sum()/len(axis2019_df[&#39;Volume&#39;]) Avgvol_2020 =axis2020_df[&#39;Volume&#39;].sum()/len(axis2020_df[&#39;Volume&#39;]) Avgvol_2021 =axis2021_df[&#39;Volume&#39;].sum()/len(axis2021_df[&#39;Volume&#39;]) # create a dataset data_volume = {&#39;2019&#39;: Avgvol_2019, &#39;2020&#39;:Avgvol_2020, &#39;2021&#39;:Avgvol_2021} Years = list(data_volume.keys()) AvgVol = list(data_volume.values()) # plotting a bar chart plt.figure(figsize=(13, 7)) plt.bar(Years, AvgVol, color =&#39;maroon&#39;,width = 0.3) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Average Volume of the Stock Traded&quot;) plt.title(&quot;Average Trading volume of the Stock over the years 2019-2021(Till April) (in 10^7)&quot;) plt.show() . From the above plot we can say that more volume of the Axis Bank stock is traded during the year 2020. We can see a significant rise in the trading volume of the stock from 2019 to 2020. . Q4: What is the Average Closing price of the stock for past three years? . Avgclose_2019 =axis2019_df[&#39;Close&#39;].sum()/len(axis2019_df[&#39;Close&#39;]) Avgclose_2020 =axis2020_df[&#39;Close&#39;].sum()/len(axis2020_df[&#39;Close&#39;]) Avgclose_2021 =axis2021_df[&#39;Close&#39;].sum()/len(axis2021_df[&#39;Close&#39;]) # create a dataset data_volume = {&#39;2019&#39;: Avgclose_2019, &#39;2020&#39;:Avgclose_2020, &#39;2021&#39;:Avgclose_2021} Years = list(data_volume.keys()) AvgClose = list(data_volume.values()) # plotting a bar chart plt.figure(figsize=(13, 7)) plt.bar(Years, AvgClose, color =&#39;maroon&#39;,width = 0.3) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Average Closding Price of the Stock Traded&quot;) plt.title(&quot;Average Closing price of the Stock over the years 2019-2021(Till April) (in 10^7)&quot;) plt.show() . We have seen the Trading Volume of the stock is more during the year 2020. In contrast, the Year 2020 has the lowest average closing price among the other two. But for the years 2019 and 2021 the Average closing price is almost same, there is not much change in the value. . Let us save and upload our work to Jovian before continuing. . import jovian . jovian.commit() . [jovian] Updating notebook &#34;sandeshkatakam/axisbank-stockmarket-data-analysis&#34; on https://jovian.ai [jovian] Committed successfully! https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis . &#39;https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis&#39; . Inferences and Conclusion . Inferences : The above data analysis is done on the data set of stock quotes for AXIS BANK during the years 2019-2021. From the Analysis we can say that during the year 2020 there has been a lot of unsteady growth, there has been rise in the volume of stock traded on the exchange, that means there has been a lot of transactions of the stock. The stock has seen a swift traffic in buy/sell during the year 2020 and has fallen back to normal in the year 2021. In contrast to the volume of the stock the closing price of the stock has decreased during the year 2020, which can be concluded as the volume of the stock traded has no relation to the price change of the stock(while most people think there can be a correlation among the two values). The price decrease for the stock may have been due to the pandemic rise in India during the year 2020. . import jovian . jovian.commit() . [jovian] Updating notebook &#34;sandeshkatakam/axisbank-stockmarket-data-analysis&#34; on https://jovian.ai [jovian] Committed successfully! https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis . &#39;https://jovian.ai/sandeshkatakam/axisbank-stockmarket-data-analysis&#39; . References and Future Work . Future Ideas for the Analyis: . I am planning to go forward with this basic Analysis of the AXISBANK stock quotes and build a Machine Learning model predicting the future stock prices. | I plan to automate the Data Analysis process for every stock in the NIFTY50 Index by defining reusable functions and automating the Analysis procedures. | Study more strong correlations between the different quotes of the stock and analyze how and why they are related in that fashion. | . REFRENCES/LINKS USED FOR THIS PROJECT : . https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.drop.html | https://stackoverflow.com/questions/16683701/in-pandas-how-to-get-the-index-of-a-known-value | https://towardsdatascience.com/working-with-datetime-in-pandas-dataframe-663f7af6c587 | https://thispointer.com/python-find-indexes-of-an-element-in-pandas-dataframe/ | https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#timeseries-friendly-merging | https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html | https://towardsdatascience.com/financial-analytics-exploratory-data-analysis-of-stock-data-d98cbadf98b9 | https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.transpose.html | https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.set_index.html | https://pandas.pydata.org/docs/reference/api/pandas.merge.html | https://stackoverflow.com/questions/14661701/how-to-drop-a-list-of-rows-from-pandas-dataframe | https://www.interviewqs.com/ddi-code-snippets/extract-month-year-pandas | https://stackoverflow.com/questions/18172851/deleting-dataframe-row-in-pandas-based-on-column-value | https://queirozf.com/entries/matplotlib-examples-displaying-and-configuring-legends | https://jakevdp.github.io/PythonDataScienceHandbook/04.06-customizing-legends.html | https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html | https://matplotlib.org/devdocs/gallery/subplots_axes_and_figures/subplots_demo.html | https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html | https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib | https://www.investopedia.com/articles/investing/093014/stock-quotes-explained.asp | https://stackoverflow.com/questions/44908383/how-can-i-group-by-month-from-a-datefield-using-python-pandas | https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.hist.html | https://note.nkmk.me/en/python-pandas-dataframe-rename/ | https://stackoverflow.com/questions/24748848/pandas-find-the-maximum-range-in-all-the-columns-of-dataframe | https://stackoverflow.com/questions/29233283/plotting-multiple-lines-in-different-colors-with-pandas-dataframe | https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html | https://www.geeksforgeeks.org/python-pandas-extracting-rows-using-loc/ | . import jovian . jovian.commit() .",
            "url": "https://sandeshkatakam.github.io/My-Machine_learning-Blog/2021/12/22/data-analysis-course-project.html",
            "relUrl": "/2021/12/22/data-analysis-course-project.html",
            "date": " • Dec 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sandeshkatakam.github.io/My-Machine_learning-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sandeshkatakam.github.io/My-Machine_learning-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sandeshkatakam.github.io/My-Machine_learning-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sandeshkatakam.github.io/My-Machine_learning-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}